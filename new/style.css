html,
body,
ul,
li,
a {
  text-decoration: none;
  color: currentColor;
  margin: 0;
  padding: 0;
  list-style: none;
}
*:not(.yesanim) {
  transition: none !important;
}
body {
  display: flex;
  margin: 0;
  background-color: #D9D2CC;
  --aside: 300px;
  --margin: 10px;
  --popDuration: 0.5s;
}
main {
  position: relative;
  flex: 1;
  margin-left: calc(var(--aside) + var(--margin));
}
#overlay {
  position: fixed;
  height: 100vh;
  left: calc(var(--aside) + calc(var(--margin) * 1.5));
  right: 0;
  opacity: 0;
  will-change: opacity;
  transition: opacity 0.2s ease;
  z-index: 999;
  pointer-events: none;
}
#overlay.front {
  opacity: 1;
}
#overlay > * {
  position: absolute;
  right: var(--margin);
  pointer-events: initial;
}
#overlay > *:first-child {
  top: var(--margin);
}
#overlay > *:last-child {
  bottom: var(--margin);
}
#overlay > *,
#overlay > * a {
  color: gray;
}
#graphs {
  margin: var(--margin);
  display: grid;
  grid-gap: var(--margin);
  justify-content: space-around;
  --count: 9;
  grid-template-columns: repeat(auto-fill, minmax(auto, calc(calc(100% - calc(var(--margin) * calc(var(--count) - 1))) / var(--count))));
  grid-auto-rows: 1fr;
  grid-auto-flow: dense;
}
#graphs::before {
  content: '';
  width: 0;
  padding-bottom: 100%;
  grid-row: 1;
  grid-column: 1;
}
#graphs article:first-child {
  grid-column: 1 / span 3;
  grid-row: 1 / span 3;
}
#graphs article.featured {
  grid-column-end: span 2;
  grid-row-end: span 2;
}
@media screen and (max-width: 2000px) {
  #graphs {
    --count: 8;
  }
}
@media screen and (max-width: 1800px) {
  #graphs {
    --count: 7;
  }
}
@media screen and (max-width: 1600px) {
  #graphs {
    --count: 6;
  }
}
@media screen and (max-width: 1400px) {
  #graphs {
    --count: 5;
  }
}
@media screen and (max-width: 1200px) {
  #graphs {
    --count: 4;
  }
}
@media screen and (max-width: 1000px) {
  #graphs {
    --count: 3;
  }
}
@media screen and (max-width: 800px) {
  #graphs {
    --count: 2;
  }
}
@media screen and (max-width: 600px) {
  #graphs {
    --count: 1;
  }
}
@media screen and (max-width: 1200px) {
  article:first-child {
    grid-column: 1 / span 2;
    grid-row: 1 / span 2;
  }
  article.featured {
    grid-column-end: span 1;
    grid-row-end: span 1;
  }
}
#meta {
  position: fixed;
  order: -1;
  width: var(--aside);
  height: 100vh;
  display: flex;
  flex-direction: column;
  padding: 0 var(--margin);
  justify-content: space-between;
  text-align: center;
  --unit: 75px;
}
#meta h1 {
  height: var(--unit);
}
#meta h1 svg {
  overflow: visible;
}
#meta h2 {
  height: var(--unit);
}
#meta > *:not(header) {
  text-transform: lowercase;
}
#meta #navigation,
#meta #menu {
  height: var(--unit);
}
#meta #navigation ul,
#meta #menu ul {
  display: flex;
}
#meta #navigation ul li,
#meta #menu ul li {
  flex: 1;
}
#meta footer li {
  height: var(--unit);
}
article {
  position: relative;
  overflow: hidden;
  transform-origin: 0 0;
  transition: transform var(--popDuration) linear, opacity var(--popDuration) ease, box-shadow 0.2s ease;
  will-change: transform, opacity, box-shadow;
  background-color: white;
  padding: calc(0.25 * var(--margin));
  cursor: pointer;
  box-shadow: 0 0 0.5px black;
}
article.frontClassToUseForMainGraph {
  position: fixed;
  top: 0;
  right: 0;
  width: calc(100vw - calc(var(--aside) + 2 * var(--margin)));
  height: 100vh;
}
article > svg {
  opacity: 0;
  transition: opacity 0.2s ease;
  will-change: opacity;
}
article.processed {
  box-shadow: 0 0 2.5px black;
}
article.processed > svg {
  opacity: 1;
}
article.texted > svg tspan,
article.texted > svg text {
  opacity: 0;
}
article.texted > svg [data-type="writing"] {
  opacity: 1;
}
article.active {
  z-index: 1;
}
article.front,
article.front:hover {
  box-shadow: 0.5px 0 1.5px black;
}
article:hover {
  box-shadow: 0.5px 0.5px 4px black;
}
article > svg {
  max-height: 100%;
  max-width: 100%;
  position: relative;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  white-space: pre;
  overflow: visible;
  transform-origin: center center;
  transition: transform var(--popDuration) linear, opacity var(--popDuration) ease;
  will-change: transform, opacity;
}
article > svg path,
article > svg line,
article > svg polyline {
  stroke-linecap: round;
  stroke-linejoin: round;
  stroke-miterlimit: 10;
  fill: none;
}
article > svg path:not([stroke]),
article > svg line:not([stroke]),
article > svg polyline:not([stroke]) {
  stroke: black;
}
article > svg path:not([stroke-width]),
article > svg line:not([stroke-width]),
article > svg polyline:not([stroke-width]) {
  stroke-width: 4;
}
article > svg tspan,
article > svg text {
  font-display: block;
  font-family: 'Permanent Marker', 'Chalkboard', 'Comic Sans MS', arial;
  opacity: 1;
  transition: opacity 0.2s ease;
  will-change: opacity;
}
article > svg [data-type="writing"] {
  opacity: 0;
  transition: opacity 0.2s ease, stroke 0.2s linear;
  will-change: opacity;
}
article > svg [data-type="erase"] {
  stroke-linejoin: bevel;
  stroke-linecap: butt;
}
