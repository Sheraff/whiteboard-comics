#dom-tricks{
	contain         : strict;
	position: absolute;
	left    : -100%;
	top     : -100%;
}

svg-card,
.svg-card {
	contain         : strict;
	box-shadow      : 0 0 3px black;
	background-color: white;

	&:not(.web-component) * {}

	&:not(:defined) {}

	svg {
		width    : 90%;
		height   : 90%;
		position : absolute;
		left     : 50%;
		top      : 50%;
		transform: translate(-50%, -50%);

		[stroke="#000000"] {}

		[data-erase] {
			display: none;
		}

		text,
		tspan {
			font-family: 'Permanent Marker';
			transition : fill .5s;
		}

		[data-type="text"] {
			opacity   : 0;
			transition: opacity .5s;
		}
	}

	&:not(.font-loaded) {

		text,
		tspan {
			display: none;
		}
	}

}

// showing text only when appropriate
body.svg-defs svg-card.alphabetized {
	[data-type="text"] {
		opacity: 1;
	}

	text,
	tspan {
		fill: rgba(0, 0, 0, 0)
	}
}

// off-screen pseudo svg-card for DOM manipulation
.svg-card {
	width      : 300px;
	height     : 300px;

	text,
	tspan {
		display: block !important;
	}
}

// grid layout
.cards {
	--margin       : 10px;
	display        : grid;
	grid-gap       : var(--margin);
	justify-content: space-around;

	// cells of equal width
	--count              : 3;
	grid-template-columns: repeat(auto-fill, minmax(auto, calc(calc(100% - calc(var(--margin) * calc(var(--count) - 1))) / var(--count))));
	grid-auto-rows       : 1fr;

	// auto-layout around cells bigger than 1x1
	grid-auto-flow: dense;

	// hack for square cells
	&::before {
		content       : '';
		width         : 0;
		padding-bottom: 100%;
		grid-row      : 1 / 1;
		grid-column   : 1 / 1;
	}

	// override hack so that 1st cell isn't blank
	*:first-child {
		grid-column: 1 / 1 / span 1;
		grid-row   : 1 / 1 / span 1;
	}
}