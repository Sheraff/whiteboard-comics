body {
	margin: 0;
	font-family: 'Permanent Marker';
	background-color: rgb(248, 244, 253);
	padding-top: 200px;
}

header {
	text-transform: lowercase;
	text-align: center;
	position: fixed;
	top: 0;
	width: 100%;
}

.svg-card, 
svg-card {
	box-shadow: -10px 11px 13px -11px;
	--shadow-duration: .5s;
	--shadow-delay: .3s;
	will-change: box-shadow;
	&.shadow-zoom-in {
		animation: var(--shadow-duration) cubic-bezier(.69,.01,.88,.65) var(--shadow-delay) shadow-zoom forwards;
	}
	&.shadow-zoom-out {
		animation: var(--shadow-duration) cubic-bezier(.69,.01,.88,.65) var(--shadow-delay) reverse shadow-zoom backwards;
	}
	@keyframes shadow-zoom { 
		from { 
			box-shadow: -10px 11px 13px -11px; 
		}
		50% {
			box-shadow: -20px 50px 100px -50px;
		} 
		to {
			box-shadow: -30px 70px 200px -70px #FFFFFF00;
		}
	}
}

svg-card {
	display: block;
	
	--bound-width: 100%;
	--bound-height: 100%;

	transition: opacity .3s;
	&:not(:defined), &:not(.sized) {
		background-color: white;
		opacity: 0;
	}

	&[data-top]{
		box-shadow: none;
	}

	svg {
		text,
		tspan {
			font-family: 'Permanent Marker';
			pointer-events: all;
		}

		[data-type=text] {
			opacity: 0;
		}

		path,
		line,
		polyline {
			will-change: stroke-dashoffset, stroke-dasharray;
		}
	}

	svg[slot=erase] {
		path {
			opacity: 0;
		}
	}
	
	// showing text only when appropriate
	&:not(.font-loaded) {
		text,
		tspan {
			fill: rgba(0, 0, 0, 0);
		}
	}

	&.alphabetized {
		[data-type="text"] {
			opacity: 1;
		}

		text,
		tspan {
			fill: rgba(0, 0, 0, 0);
		}
	}

	&.selecting {
		text,
		tspan {
			fill: rgba(255, 255, 255, .1) !important;
		}
	}

	&[data-last] {
		z-index: 1;
	}
}

#dom-tricks {
	contain: strict;
	position: absolute;
	left: -100%;
	top: -100%;

	// off-screen pseudo svg-card for DOM manipulation
	.svg-card {
		width: 300px;
		height: 300px;

		text,
		tspan {
			font-family: 'Permanent Marker';
			display: block !important;
		}
	}
}


grid-layout {
	--count: 1;
	--featured: 1;
	--first: 1;
	--margin: 20px;
	display: grid;
	grid-gap: var(--margin);
	justify-content: space-around;
	margin: var(--margin);

	max-width: 2500px;

	// cells of equal width
	grid-template-columns: repeat(auto-fill, minmax(auto, calc(calc(100% - calc(var(--margin) * calc(var(--count) - 1))) / var(--count))));
	grid-auto-rows: 1fr;

	// auto-layout around cells bigger than 1x1
	grid-auto-flow: dense;

	// hack for square cells
	&::before {
		content: '';
		width: 0;
		padding-bottom: 100%;
		grid-row: 1 / 1;
		grid-column: 1 / 1;
	}

	// override hack so that 1st cell isn't blank
	:first-child {
		grid-column: 1 / 1 / span var(--first);
		grid-row: 1 / 1 / span var(--first);
	}

	[featured] {
		grid-column-end: span var(--featured);
		grid-row-end: span var(--featured);
	}

	svg-card {

		&[data-last] {
			z-index: 2;
		}

		&:not([data-top]) {
			&.move-up {
				transform: translateY(-300px);
			}

			&.move-down {
				transform: translateY(300px);
			}

			&.node-down {
				svg {
					display: none;
				}
			}
		}
	}

	.svg-card {
		z-index: 1;
	}
}

@media (min-width: 375px) {
	grid-layout {
		--count: 2;
	}
}

@media (min-width: 450px) {
	grid-layout {
		--count: 3;
		--first: 2;
	}
}

@media (min-width: 550px) {
	grid-layout {
		--count: 4;
	}
}

@media (min-width: 750px) {
	grid-layout {
		--count: 5;
	}
}

@media (min-width: 1000px) {
	grid-layout {
		--count: 6;
		--first: 3;
		--featured: 2;
	}
}

@media (min-width: 1350px) {
	grid-layout {
		--count: 7;
	}
}

@media (min-width: 1850px) {
	grid-layout {
		--count: 8;
	}
}

@media (min-width: 2500px) {
	grid-layout {
		--count: 9;
		--first: 4;
	}
}